//brute force tc O(n^2)
    //base case: if there's only one element-> replace it with -1
    if(arr.size()==1){
        arr[0]=-1;
        return arr;
    }
    
    //loop over the whole array elements
    for(int i=0;i<arr.size();i++){
        //initialize the maximum variable with 0 in each step
        int max=0;
        //loop over the remainder array elements again
        for(int j=i+1;j<arr.size();j++)
            //get the largest value
            if(arr[j]>max)
                max=arr[j];
        //replace the current value with the max one
        arr[i]=max;
    }
    
    //after that-> replace the last value with -1 & return the array
    arr[arr.size()-1]=-1;
    return arr;
}

//better: tc O(n) sc O(n)
class Solution {
public:
    vector<int> replaceElements(vector<int>& arr) {
        int n = arr.size();
    vector<int> ans(n);

    priority_queue<int> max_heap;

    // Insert all elements into the heap
    for (int i = 0; i < n; i++) {
        max_heap.push(arr[i]);
    }

    // Pop the maximum element for each element in the array
    int max = -1;
    for (int i = n - 1; i >= 0; i--) {
        ans[i] = max;
        max = std::max(max, arr[i]);
    }

    return ans;
    }
};


//optimal tc O(n) sc: O(1)

class Solution {
public:
    vector<int> replaceElements(vector<int>& arr) {
    int n=arr.size();
        vector<int>ans(n);
        int max=arr[n-1];
        for(int i=n-2; i>=0; i--)
        {
            if(max < arr[i+1])
                max=arr[i+1];
            ans[i]=max;
        }
        ans[n-1]=-1;
        return ans;
    }
};

